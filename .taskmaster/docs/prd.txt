🌿 Minimal PRD: USDC Donation Infrastructure (Reusable Component)

🧩 Feature Name

USDC Donation Handler

⸻

📝 Objective

Develop a lightweight backend module that enables a fixed USDC donation to a verified NGO wallet. This module should be reusable and callable from a frontend or mini-app for easy integration into larger ecosystems.

⸻

🎯 Goals
	•	Enable on-chain USDC transfer to a pre-defined organization
	•	Return transaction hash and success/failure state
	•	Be exposed as an API endpoint or callable function from:
	•	Frontend web app
	•	Mobile mini-app (e.g. World App, educational tools)

⸻

👤 User Flow
	1.	User clicks "Donate" button in frontend or app
	2.	Frontend sends request to backend API
	3.	Backend:
	•	Loads signer
	•	Executes USDC transfer() to NGO
	•	Waits for confirmation
	4.	Backend returns:
	•	Status (success/fail)
	•	Transaction hash

⸻

💻 Backend Requirements

Tech Stack

Component	Tool
Runtime	Node.js
Web3	ethers.js
Server	Express.js
Storage	.env for secrets and config

API Endpoint

Method	Endpoint	Description
POST	/api/donate	Triggers USDC donation

Payload

{
  "amount": "5"
}

Environment Parameters

Param	Description
USER_WALLET_PK	Donor's private key (test/demo)
USDC_CONTRACT	USDC ERC-20 contract address
RECIPIENT_WALLET	NGO wallet address
RPC_URL	Ethereum/Polygon node provider endpoint

⸻

🔄 Process Flow
	1.	API receives donation request
	2.	Backend signs and sends transfer(recipient, amount)
	3.	Waits for transaction confirmation
	4.	Returns result to frontend

⸻

🔒 Security Notes
	•	Do not expose wallet key in frontend
	•	Store .env safely
	•	Limit amount for test/demo
	•	Add basic request validation and rate limiting

⸻

🏦 Recipient Wallet

Organization: One Tree Planted
Wallet Address: 0xd9Cda69D2Adf7b4Eb2B77e35c492Bd96B86e8bA7
(via Every.org USDC passthrough)

⸻

📦 Deliverables
	•	✅ donateUSDC.js backend module
	•	✅ Express.js server with /api/donate endpoint
	•	✅ .env.example and setup guide

⸻

🏗️ Technical Implementation Details

Network Configuration
- Support for Ethereum mainnet and Polygon for lower gas fees
- Configurable RPC endpoints
- Gas estimation and fee optimization

Error Handling
- Comprehensive error responses for various failure scenarios
- Wallet balance validation before transaction
- Network connectivity checks
- Transaction timeout handling

Testing Strategy
- Unit tests for donation module
- Integration tests for API endpoints
- Mock wallet and contract interactions for testing
- Test with both mainnet and testnet configurations

Development Environment Setup
- Node.js version requirements
- Package.json with all dependencies
- Clear installation and setup instructions
- Environment variable configuration guide

Security Considerations
- Input validation and sanitization
- Rate limiting to prevent abuse
- Secure private key management
- CORS configuration for frontend integration 